{
  "pluginId": "default",
  "version": "current",
  "label": "Next",
  "banner": null,
  "badge": false,
  "className": "docs-version-current",
  "isLast": true,
  "docsSidebars": {
    "tutorialSidebar": [
      {
        "type": "link",
        "label": "Introduction",
        "href": "/docs/intro",
        "docId": "intro"
      },
      {
        "type": "category",
        "label": "HashMaps",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "First Unique Character in a String",
            "href": "/docs/HashMaps/first_unique_character_in_string",
            "docId": "HashMaps/first_unique_character_in_string"
          },
          {
            "type": "link",
            "label": "introduction",
            "href": "/docs/HashMaps/introduction",
            "docId": "HashMaps/introduction"
          },
          {
            "type": "link",
            "label": "top_k_freq",
            "href": "/docs/HashMaps/top_k_freq",
            "docId": "HashMaps/top_k_freq"
          }
        ],
        "href": "/docs/category/hashmaps"
      },
      {
        "type": "category",
        "label": "LinkedList",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Partition List",
            "href": "/docs/LinkedList/partition_list",
            "docId": "LinkedList/partition_list"
          },
          {
            "type": "link",
            "label": "Odd Even Linked List By Index",
            "href": "/docs/LinkedList/odd_even",
            "docId": "LinkedList/odd_even"
          },
          {
            "type": "link",
            "label": "Segregate even and odd nodes in a Link List",
            "href": "/docs/LinkedList/segregate_even_odd",
            "docId": "LinkedList/segregate_even_odd"
          },
          {
            "type": "link",
            "label": "Rotate the Linked List",
            "href": "/docs/LinkedList/rotate_list",
            "docId": "LinkedList/rotate_list"
          },
          {
            "type": "link",
            "label": "Remove Duplicates from Sorted List II",
            "href": "/docs/LinkedList/remove_duplicate_2",
            "docId": "LinkedList/remove_duplicate_2"
          },
          {
            "type": "link",
            "label": "Copy List with Random Pointer",
            "href": "/docs/LinkedList/copy_list_random_pointer",
            "docId": "LinkedList/copy_list_random_pointer"
          },
          {
            "type": "link",
            "label": "Remove Nth Node From End of List",
            "href": "/docs/LinkedList/remove_nth_node_from_end",
            "docId": "LinkedList/remove_nth_node_from_end"
          },
          {
            "type": "category",
            "label": "Basic",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Reverse Linked List 2",
                "href": "/docs/LinkedList/Basic/reverse_linked_list",
                "docId": "LinkedList/Basic/reverse_linked_list"
              },
              {
                "type": "link",
                "label": "merge_2_sorted_list",
                "href": "/docs/LinkedList/Basic/merge_2_sorted_list",
                "docId": "LinkedList/Basic/merge_2_sorted_list"
              },
              {
                "type": "link",
                "label": "reorder_list",
                "href": "/docs/LinkedList/Basic/reorder_list",
                "docId": "LinkedList/Basic/reorder_list"
              },
              {
                "type": "link",
                "label": "swap_nodes_in_pair",
                "href": "/docs/LinkedList/Basic/swap_nodes_in_pair",
                "docId": "LinkedList/Basic/swap_nodes_in_pair"
              }
            ]
          },
          {
            "type": "category",
            "label": "ListCycle",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "first_node_in_cycle",
                "href": "/docs/LinkedList/ListCycle/first_node_in_cycle",
                "docId": "LinkedList/ListCycle/first_node_in_cycle"
              }
            ]
          },
          {
            "type": "category",
            "label": "Maths",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Add Two Numbers",
                "href": "/docs/LinkedList/Maths/add_two_numers",
                "docId": "LinkedList/Maths/add_two_numers"
              },
              {
                "type": "link",
                "label": "add_number_2",
                "href": "/docs/LinkedList/Maths/add_number_2",
                "docId": "LinkedList/Maths/add_number_2"
              }
            ]
          },
          {
            "type": "link",
            "label": "intersection_linked_list",
            "href": "/docs/LinkedList/intersection_linked_list",
            "docId": "LinkedList/intersection_linked_list"
          },
          {
            "type": "link",
            "label": "remove_duplicate_1",
            "href": "/docs/LinkedList/remove_duplicate_1",
            "docId": "LinkedList/remove_duplicate_1"
          }
        ],
        "href": "/docs/category/linkedlist"
      },
      {
        "type": "category",
        "label": "Queue",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Sliding Window Maximum",
            "href": "/docs/Queue/sliding_window_maximum",
            "docId": "Queue/sliding_window_maximum"
          },
          {
            "type": "category",
            "label": "BFS",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Introduction for BFS(Breath First Search)",
                "href": "/docs/Queue/BFS/introduction",
                "docId": "Queue/BFS/introduction"
              },
              {
                "type": "link",
                "label": "Number of Islands",
                "href": "/docs/Queue/BFS/number_of_island",
                "docId": "Queue/BFS/number_of_island"
              }
            ]
          }
        ],
        "href": "/docs/category/queue"
      },
      {
        "type": "category",
        "label": "DynamicProgramming",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Frog Jump",
            "href": "/docs/DynamicProgramming/frog_jump",
            "docId": "DynamicProgramming/frog_jump"
          },
          {
            "type": "category",
            "label": "1D-DP",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Unique Binary Search Trees / Catalan Numbers",
                "href": "/docs/DynamicProgramming/1D-DP/unique_binary_search_trees",
                "docId": "DynamicProgramming/1D-DP/unique_binary_search_trees"
              },
              {
                "type": "link",
                "label": "Longest Increasing Subsequence",
                "href": "/docs/DynamicProgramming/1D-DP/longest_increasing_subsequence",
                "docId": "DynamicProgramming/1D-DP/longest_increasing_subsequence"
              },
              {
                "type": "link",
                "label": "Jump Game",
                "href": "/docs/DynamicProgramming/1D-DP/jump_game",
                "docId": "DynamicProgramming/1D-DP/jump_game"
              },
              {
                "type": "link",
                "label": "coin_change",
                "href": "/docs/DynamicProgramming/1D-DP/coin_change",
                "docId": "DynamicProgramming/1D-DP/coin_change"
              },
              {
                "type": "link",
                "label": "decode_ways",
                "href": "/docs/DynamicProgramming/1D-DP/decode_ways",
                "docId": "DynamicProgramming/1D-DP/decode_ways"
              }
            ]
          },
          {
            "type": "category",
            "label": "2D-DP",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Maximum Length of Repeated Subarray",
                "href": "/docs/DynamicProgramming/2D-DP/maxlen_repeated_subarray",
                "docId": "DynamicProgramming/2D-DP/maxlen_repeated_subarray"
              },
              {
                "type": "link",
                "label": "minimum-difficulty-of-a-job-schedule",
                "href": "/docs/DynamicProgramming/2D-DP/minimum-difficulty-of-a-job-schedule",
                "docId": "DynamicProgramming/2D-DP/minimum-difficulty-of-a-job-schedule"
              }
            ]
          },
          {
            "type": "category",
            "label": "BuySellStocks",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Best Time to Buy and Sell Stock",
                "href": "/docs/DynamicProgramming/BuySellStocks/buy_sell_stocks_1",
                "docId": "DynamicProgramming/BuySellStocks/buy_sell_stocks_1"
              },
              {
                "type": "link",
                "label": "Best Time to Buy and Sell Stock II",
                "href": "/docs/DynamicProgramming/BuySellStocks/buy_sell_stocks_2",
                "docId": "DynamicProgramming/BuySellStocks/buy_sell_stocks_2"
              },
              {
                "type": "link",
                "label": "Best Time to Buy and Sell Stock III",
                "href": "/docs/DynamicProgramming/BuySellStocks/buy_sell_stocks_3",
                "docId": "DynamicProgramming/BuySellStocks/buy_sell_stocks_3"
              },
              {
                "type": "link",
                "label": "buy_sell_stocks_4",
                "href": "/docs/DynamicProgramming/BuySellStocks/buy_sell_stocks_4",
                "docId": "DynamicProgramming/BuySellStocks/buy_sell_stocks_4"
              }
            ]
          },
          {
            "type": "category",
            "label": "DP-Rectangle",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Count Square Submatrices with All Ones",
                "href": "/docs/DynamicProgramming/DP-Rectangle/count-square-submatrices-with-all-ones",
                "docId": "DynamicProgramming/DP-Rectangle/count-square-submatrices-with-all-ones"
              },
              {
                "type": "link",
                "label": "Maximal Squares",
                "href": "/docs/DynamicProgramming/DP-Rectangle/maximal_square",
                "docId": "DynamicProgramming/DP-Rectangle/maximal_square"
              },
              {
                "type": "link",
                "label": "maximal_rectangle",
                "href": "/docs/DynamicProgramming/DP-Rectangle/maximal_rectangle",
                "docId": "DynamicProgramming/DP-Rectangle/maximal_rectangle"
              }
            ]
          },
          {
            "type": "category",
            "label": "DPStrings",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "longest_common_subsequence",
                "href": "/docs/DynamicProgramming/DPStrings/longest_common_subsequence",
                "docId": "DynamicProgramming/DPStrings/longest_common_subsequence"
              },
              {
                "type": "link",
                "label": "longest_common_substring",
                "href": "/docs/DynamicProgramming/DPStrings/longest_common_substring",
                "docId": "DynamicProgramming/DPStrings/longest_common_substring"
              },
              {
                "type": "link",
                "label": "longest_valid_paranthesis",
                "href": "/docs/DynamicProgramming/DPStrings/longest_valid_paranthesis",
                "docId": "DynamicProgramming/DPStrings/longest_valid_paranthesis"
              }
            ]
          },
          {
            "type": "category",
            "label": "PreComputation",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "product_except_self",
                "href": "/docs/DynamicProgramming/PreComputation/product_except_self",
                "docId": "DynamicProgramming/PreComputation/product_except_self"
              }
            ]
          }
        ],
        "href": "/docs/category/dynamicprogramming"
      },
      {
        "type": "category",
        "label": "Stack",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Sum of Subarray Minimums",
            "href": "/docs/Stack/sum-of-subarray-minimums",
            "docId": "Stack/sum-of-subarray-minimums"
          },
          {
            "type": "category",
            "label": "MonotonicStack",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Next Greater Element",
                "href": "/docs/Stack/MonotonicStack/next_greater_element",
                "docId": "Stack/MonotonicStack/next_greater_element"
              },
              {
                "type": "link",
                "label": "introduction",
                "href": "/docs/Stack/MonotonicStack/introduction",
                "docId": "Stack/MonotonicStack/introduction"
              },
              {
                "type": "link",
                "label": "largest_rectange_histogram",
                "href": "/docs/Stack/MonotonicStack/largest_rectange_histogram",
                "docId": "Stack/MonotonicStack/largest_rectange_histogram"
              },
              {
                "type": "link",
                "label": "maximum_binary_tree",
                "href": "/docs/Stack/MonotonicStack/maximum_binary_tree",
                "docId": "Stack/MonotonicStack/maximum_binary_tree"
              },
              {
                "type": "link",
                "label": "most_competitive_subsequence",
                "href": "/docs/Stack/MonotonicStack/most_competitive_subsequence",
                "docId": "Stack/MonotonicStack/most_competitive_subsequence"
              },
              {
                "type": "link",
                "label": "remove_k_digits",
                "href": "/docs/Stack/MonotonicStack/remove_k_digits",
                "docId": "Stack/MonotonicStack/remove_k_digits"
              }
            ]
          },
          {
            "type": "link",
            "label": "reverse_polish_notation",
            "href": "/docs/Stack/reverse_polish_notation",
            "docId": "Stack/reverse_polish_notation"
          }
        ],
        "href": "/docs/category/stack"
      },
      {
        "type": "category",
        "label": "Arrays",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "BasicQues",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "majority_element",
                "href": "/docs/Arrays/BasicQues/majority_element",
                "docId": "Arrays/BasicQues/majority_element"
              }
            ]
          },
          {
            "type": "category",
            "label": "CycleTechniques",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Duplicate in Array",
                "href": "/docs/Arrays/CycleTechniques/duplicate_in_array",
                "docId": "Arrays/CycleTechniques/duplicate_in_array"
              },
              {
                "type": "link",
                "label": "First Missing Positive",
                "href": "/docs/Arrays/CycleTechniques/first_missing_pos",
                "docId": "Arrays/CycleTechniques/first_missing_pos"
              },
              {
                "type": "link",
                "label": "find_all_duplicates",
                "href": "/docs/Arrays/CycleTechniques/find_all_duplicates",
                "docId": "Arrays/CycleTechniques/find_all_duplicates"
              }
            ]
          },
          {
            "type": "category",
            "label": "Interval",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Merge Intervals",
                "href": "/docs/Arrays/Interval/merge_intervals",
                "docId": "Arrays/Interval/merge_intervals"
              }
            ]
          },
          {
            "type": "category",
            "label": "KadaneAlgo",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Maximum Subarray",
                "href": "/docs/Arrays/KadaneAlgo/max_subarray",
                "docId": "Arrays/KadaneAlgo/max_subarray"
              },
              {
                "type": "link",
                "label": "max_product_subarray",
                "href": "/docs/Arrays/KadaneAlgo/max_product_subarray",
                "docId": "Arrays/KadaneAlgo/max_product_subarray"
              }
            ]
          },
          {
            "type": "category",
            "label": "Matrix",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Set Matrix Zero",
                "href": "/docs/Arrays/Matrix/set_matrix_0",
                "docId": "Arrays/Matrix/set_matrix_0"
              },
              {
                "type": "link",
                "label": "spiral_matrix",
                "href": "/docs/Arrays/Matrix/spiral_matrix",
                "docId": "Arrays/Matrix/spiral_matrix"
              }
            ]
          },
          {
            "type": "category",
            "label": "N-Sum",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "sum-closest",
                "href": "/docs/Arrays/N-Sum/sum-closest",
                "docId": "Arrays/N-Sum/sum-closest"
              },
              {
                "type": "link",
                "label": "sum",
                "href": "/docs/Arrays/N-Sum/sum",
                "docId": "Arrays/N-Sum/sum"
              },
              {
                "type": "link",
                "label": "sum",
                "href": "/docs/Arrays/N-Sum/sum",
                "docId": "Arrays/N-Sum/sum"
              },
              {
                "type": "link",
                "label": "sum",
                "href": "/docs/Arrays/N-Sum/sum",
                "docId": "Arrays/N-Sum/sum"
              }
            ]
          },
          {
            "type": "category",
            "label": "Prefix-Sum",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Running Sum Array",
                "href": "/docs/Arrays/Prefix-Sum/running_sum",
                "docId": "Arrays/Prefix-Sum/running_sum"
              },
              {
                "type": "link",
                "label": "continuous-subarray-sum",
                "href": "/docs/Arrays/Prefix-Sum/continuous-subarray-sum",
                "docId": "Arrays/Prefix-Sum/continuous-subarray-sum"
              },
              {
                "type": "link",
                "label": "pivot_index",
                "href": "/docs/Arrays/Prefix-Sum/pivot_index",
                "docId": "Arrays/Prefix-Sum/pivot_index"
              },
              {
                "type": "link",
                "label": "subarray_sum_divisible_k",
                "href": "/docs/Arrays/Prefix-Sum/subarray_sum_divisible_k",
                "docId": "Arrays/Prefix-Sum/subarray_sum_divisible_k"
              },
              {
                "type": "link",
                "label": "subarray_sum_equals_k",
                "href": "/docs/Arrays/Prefix-Sum/subarray_sum_equals_k",
                "docId": "Arrays/Prefix-Sum/subarray_sum_equals_k"
              }
            ]
          },
          {
            "type": "category",
            "label": "TwoPointers",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Trapping Rain Water",
                "href": "/docs/Arrays/TwoPointers/trapping_rain_water",
                "docId": "Arrays/TwoPointers/trapping_rain_water"
              },
              {
                "type": "link",
                "label": "Next Permutation of a given array",
                "href": "/docs/Arrays/TwoPointers/next_permutation",
                "docId": "Arrays/TwoPointers/next_permutation"
              },
              {
                "type": "link",
                "label": "container_with_most_water",
                "href": "/docs/Arrays/TwoPointers/container_with_most_water",
                "docId": "Arrays/TwoPointers/container_with_most_water"
              },
              {
                "type": "link",
                "label": "merge_sorted_arrays",
                "href": "/docs/Arrays/TwoPointers/merge_sorted_arrays",
                "docId": "Arrays/TwoPointers/merge_sorted_arrays"
              },
              {
                "type": "link",
                "label": "move_zeroes",
                "href": "/docs/Arrays/TwoPointers/move_zeroes",
                "docId": "Arrays/TwoPointers/move_zeroes"
              },
              {
                "type": "link",
                "label": "remove-duplicates-from-sorted-array",
                "href": "/docs/Arrays/TwoPointers/remove-duplicates-from-sorted-array",
                "docId": "Arrays/TwoPointers/remove-duplicates-from-sorted-array"
              },
              {
                "type": "link",
                "label": "sort_colors",
                "href": "/docs/Arrays/TwoPointers/sort_colors",
                "docId": "Arrays/TwoPointers/sort_colors"
              },
              {
                "type": "link",
                "label": "squares_sorted_arr",
                "href": "/docs/Arrays/TwoPointers/squares_sorted_arr",
                "docId": "Arrays/TwoPointers/squares_sorted_arr"
              }
            ]
          }
        ],
        "href": "/docs/category/arrays"
      },
      {
        "type": "category",
        "label": "Segment Trees",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Segment Trees",
            "href": "/docs/SegmentTrees/intro",
            "docId": "SegmentTrees/intro"
          }
        ],
        "href": "/docs/category/segment-trees"
      },
      {
        "type": "category",
        "label": "BitManipulation",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "power_of_2",
            "href": "/docs/BitManipulation/power_of_2",
            "docId": "BitManipulation/power_of_2"
          }
        ]
      },
      {
        "type": "category",
        "label": "Design",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "lfu_cache",
            "href": "/docs/Design/lfu_cache",
            "docId": "Design/lfu_cache"
          },
          {
            "type": "link",
            "label": "lru_cache",
            "href": "/docs/Design/lru_cache",
            "docId": "Design/lru_cache"
          },
          {
            "type": "link",
            "label": "min_stack",
            "href": "/docs/Design/min_stack",
            "docId": "Design/min_stack"
          },
          {
            "type": "link",
            "label": "time-based-key-value-store",
            "href": "/docs/Design/time-based-key-value-store",
            "docId": "Design/time-based-key-value-store"
          }
        ]
      },
      {
        "type": "category",
        "label": "Graph",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "CycleDetection",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Detect cycle in a directed graph",
                "href": "/docs/Graph/CycleDetection/directed_graph",
                "docId": "Graph/CycleDetection/directed_graph"
              },
              {
                "type": "link",
                "label": "Detect cycle in a undirected graph",
                "href": "/docs/Graph/CycleDetection/undirected_graph",
                "docId": "Graph/CycleDetection/undirected_graph"
              }
            ]
          },
          {
            "type": "category",
            "label": "DisjointSetUnion",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Introduction to Disjoin Set Union",
                "href": "/docs/Graph/DisjointSetUnion/introduction",
                "docId": "Graph/DisjointSetUnion/introduction"
              },
              {
                "type": "link",
                "label": "Redundant Connection",
                "href": "/docs/Graph/DisjointSetUnion/redundant_connection",
                "docId": "Graph/DisjointSetUnion/redundant_connection"
              },
              {
                "type": "link",
                "label": "Number of Operations to Make Network Connected",
                "href": "/docs/Graph/DisjointSetUnion/number_of_operation",
                "docId": "Graph/DisjointSetUnion/number_of_operation"
              }
            ]
          },
          {
            "type": "category",
            "label": "FloodFill",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Introduction to Flood Fill Algorithm",
                "href": "/docs/Graph/FloodFill/introduction",
                "docId": "Graph/FloodFill/introduction"
              },
              {
                "type": "link",
                "label": "Pacific Atlantic Water Flow",
                "href": "/docs/Graph/FloodFill/pacific_atlantic_water_flow",
                "docId": "Graph/FloodFill/pacific_atlantic_water_flow"
              },
              {
                "type": "link",
                "label": "Given a matrix of ‘O’ and ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’",
                "href": "/docs/Graph/FloodFill/replace_o_x_surrounded_x",
                "docId": "Graph/FloodFill/replace_o_x_surrounded_x"
              }
            ]
          },
          {
            "type": "category",
            "label": "ShortestPath",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "category",
                "label": "Dijkstra",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Introduction of Dijkstra's algorithm",
                    "href": "/docs/Graph/ShortestPath/Dijkstra/introduction",
                    "docId": "Graph/ShortestPath/Dijkstra/introduction"
                  },
                  {
                    "type": "link",
                    "label": "Network Delay Time",
                    "href": "/docs/Graph/ShortestPath/Dijkstra/network_delay_time",
                    "docId": "Graph/ShortestPath/Dijkstra/network_delay_time"
                  },
                  {
                    "type": "link",
                    "label": "cheapest-flights-within-k-stops",
                    "href": "/docs/Graph/ShortestPath/Dijkstra/cheapest-flights-within-k-stops",
                    "docId": "Graph/ShortestPath/Dijkstra/cheapest-flights-within-k-stops"
                  }
                ]
              }
            ]
          },
          {
            "type": "category",
            "label": "TarjanAlgo",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "introduction",
                "href": "/docs/Graph/TarjanAlgo/introduction",
                "docId": "Graph/TarjanAlgo/introduction"
              }
            ]
          },
          {
            "type": "category",
            "label": "TopoSort",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "introduction",
                "href": "/docs/Graph/TopoSort/introduction",
                "docId": "Graph/TopoSort/introduction"
              }
            ]
          },
          {
            "type": "link",
            "label": "clone_graph",
            "href": "/docs/Graph/clone_graph",
            "docId": "Graph/clone_graph"
          },
          {
            "type": "link",
            "label": "is_graph_bipartite",
            "href": "/docs/Graph/is_graph_bipartite",
            "docId": "Graph/is_graph_bipartite"
          }
        ]
      },
      {
        "type": "category",
        "label": "Greedy",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Gas Station",
            "href": "/docs/Greedy/gas_station",
            "docId": "Greedy/gas_station"
          },
          {
            "type": "link",
            "label": "Maximum no of 1's row",
            "href": "/docs/Greedy/max_number_1s",
            "docId": "Greedy/max_number_1s"
          },
          {
            "type": "link",
            "label": "jump_game",
            "href": "/docs/Greedy/jump_game",
            "docId": "Greedy/jump_game"
          },
          {
            "type": "link",
            "label": "max_events_canbe_attended",
            "href": "/docs/Greedy/max_events_canbe_attended",
            "docId": "Greedy/max_events_canbe_attended"
          },
          {
            "type": "link",
            "label": "min_cost_leaf_values",
            "href": "/docs/Greedy/min_cost_leaf_values",
            "docId": "Greedy/min_cost_leaf_values"
          },
          {
            "type": "link",
            "label": "min_time_to_make_rope_colorful",
            "href": "/docs/Greedy/min_time_to_make_rope_colorful",
            "docId": "Greedy/min_time_to_make_rope_colorful"
          },
          {
            "type": "link",
            "label": "minimum-deletions-to-make-character-frequencies-unique",
            "href": "/docs/Greedy/minimum-deletions-to-make-character-frequencies-unique",
            "docId": "Greedy/minimum-deletions-to-make-character-frequencies-unique"
          },
          {
            "type": "link",
            "label": "non_overlapping_intervals",
            "href": "/docs/Greedy/non_overlapping_intervals",
            "docId": "Greedy/non_overlapping_intervals"
          }
        ]
      },
      {
        "type": "category",
        "label": "Heap",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Introduction to Heap Data Structure",
            "href": "/docs/Heap/introduction",
            "docId": "Heap/introduction"
          },
          {
            "type": "category",
            "label": "Heap",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "median_stream",
                "href": "/docs/Heap/Heap/median_stream",
                "docId": "Heap/Heap/median_stream"
              }
            ]
          },
          {
            "type": "category",
            "label": "PriorityQueue",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Find K Closest Elements",
                "href": "/docs/Heap/PriorityQueue/k-closest-points",
                "docId": "Heap/PriorityQueue/k-closest-points"
              }
            ]
          }
        ]
      },
      {
        "type": "category",
        "label": "Maths",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Permutation Sequence",
            "href": "/docs/Maths/permutation_sequence",
            "docId": "Maths/permutation_sequence"
          },
          {
            "type": "link",
            "label": "Missing Number",
            "href": "/docs/Maths/missing_num",
            "docId": "Maths/missing_num"
          },
          {
            "type": "link",
            "label": "atoi",
            "href": "/docs/Maths/atoi",
            "docId": "Maths/atoi"
          },
          {
            "type": "link",
            "label": "min_moves_for_equal_array",
            "href": "/docs/Maths/min_moves_for_equal_array",
            "docId": "Maths/min_moves_for_equal_array"
          },
          {
            "type": "link",
            "label": "multiply_string",
            "href": "/docs/Maths/multiply_string",
            "docId": "Maths/multiply_string"
          },
          {
            "type": "link",
            "label": "plus_one",
            "href": "/docs/Maths/plus_one",
            "docId": "Maths/plus_one"
          },
          {
            "type": "link",
            "label": "pow_x_n",
            "href": "/docs/Maths/pow_x_n",
            "docId": "Maths/pow_x_n"
          }
        ]
      },
      {
        "type": "category",
        "label": "Recursion",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "Backtracking",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "combination_sum_1",
                "href": "/docs/Recursion/Backtracking/combination_sum_1",
                "docId": "Recursion/Backtracking/combination_sum_1"
              },
              {
                "type": "link",
                "label": "generate_paranthesis",
                "href": "/docs/Recursion/Backtracking/generate_paranthesis",
                "docId": "Recursion/Backtracking/generate_paranthesis"
              },
              {
                "type": "link",
                "label": "partition_k_eqal_sum_subset",
                "href": "/docs/Recursion/Backtracking/partition_k_eqal_sum_subset",
                "docId": "Recursion/Backtracking/partition_k_eqal_sum_subset"
              },
              {
                "type": "link",
                "label": "subset_1",
                "href": "/docs/Recursion/Backtracking/subset_1",
                "docId": "Recursion/Backtracking/subset_1"
              }
            ]
          },
          {
            "type": "category",
            "label": "DFS",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Longest Increasing Path in a Matrix",
                "href": "/docs/Recursion/DFS/longest_increasing_path_matrix",
                "docId": "Recursion/DFS/longest_increasing_path_matrix"
              },
              {
                "type": "link",
                "label": "Shortest Bridge",
                "href": "/docs/Recursion/DFS/shortest_bridge",
                "docId": "Recursion/DFS/shortest_bridge"
              },
              {
                "type": "link",
                "label": "Number of Closed Island",
                "href": "/docs/Recursion/DFS/number_of_closed_island",
                "docId": "Recursion/DFS/number_of_closed_island"
              },
              {
                "type": "link",
                "label": "Making a Large Island",
                "href": "/docs/Recursion/DFS/making_large_island",
                "docId": "Recursion/DFS/making_large_island"
              },
              {
                "type": "link",
                "label": "introduction",
                "href": "/docs/Recursion/DFS/introduction",
                "docId": "Recursion/DFS/introduction"
              },
              {
                "type": "link",
                "label": "number_of_island",
                "href": "/docs/Recursion/DFS/number_of_island",
                "docId": "Recursion/DFS/number_of_island"
              },
              {
                "type": "link",
                "label": "word_search",
                "href": "/docs/Recursion/DFS/word_search",
                "docId": "Recursion/DFS/word_search"
              },
              {
                "type": "link",
                "label": "word_search_2",
                "href": "/docs/Recursion/DFS/word_search_2",
                "docId": "Recursion/DFS/word_search_2"
              }
            ]
          }
        ]
      },
      {
        "type": "category",
        "label": "Searching",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "BinarySearch",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Introduction of Binary Search",
                "href": "/docs/Searching/BinarySearch/introduction",
                "docId": "Searching/BinarySearch/introduction"
              },
              {
                "type": "link",
                "label": "Capacity To Ship Packages Within D Days",
                "href": "/docs/Searching/BinarySearch/capacity_to_ship_package_within_ddays",
                "docId": "Searching/BinarySearch/capacity_to_ship_package_within_ddays"
              },
              {
                "type": "link",
                "label": "Minimum Limit of Balls In Bag",
                "href": "/docs/Searching/BinarySearch/minimum_limit_of_balls_in_bag",
                "docId": "Searching/BinarySearch/minimum_limit_of_balls_in_bag"
              },
              {
                "type": "link",
                "label": "Search in Rotated Sorted Array",
                "href": "/docs/Searching/BinarySearch/search_in_rotated",
                "docId": "Searching/BinarySearch/search_in_rotated"
              },
              {
                "type": "link",
                "label": "Median of Two Sorted Arrays",
                "href": "/docs/Searching/BinarySearch/median_2_sorted_arrays",
                "docId": "Searching/BinarySearch/median_2_sorted_arrays"
              },
              {
                "type": "link",
                "label": "find_peak",
                "href": "/docs/Searching/BinarySearch/find_peak",
                "docId": "Searching/BinarySearch/find_peak"
              },
              {
                "type": "link",
                "label": "first_last_pos",
                "href": "/docs/Searching/BinarySearch/first_last_pos",
                "docId": "Searching/BinarySearch/first_last_pos"
              },
              {
                "type": "link",
                "label": "min_in_roated_sorted_array",
                "href": "/docs/Searching/BinarySearch/min_in_roated_sorted_array",
                "docId": "Searching/BinarySearch/min_in_roated_sorted_array"
              },
              {
                "type": "link",
                "label": "min_roated_sorted_array_with_duplicates",
                "href": "/docs/Searching/BinarySearch/min_roated_sorted_array_with_duplicates",
                "docId": "Searching/BinarySearch/min_roated_sorted_array_with_duplicates"
              }
            ]
          }
        ]
      },
      {
        "type": "category",
        "label": "SlidingWindow",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "longest-repeating-character-replacement",
            "href": "/docs/SlidingWindow/longest-repeating-character-replacement",
            "docId": "SlidingWindow/longest-repeating-character-replacement"
          },
          {
            "type": "link",
            "label": "longest-substring-with-at-least-k-repeating-characters",
            "href": "/docs/SlidingWindow/longest-substring-with-at-least-k-repeating-characters",
            "docId": "SlidingWindow/longest-substring-with-at-least-k-repeating-characters"
          },
          {
            "type": "link",
            "label": "longest_substring_without_repeat",
            "href": "/docs/SlidingWindow/longest_substring_without_repeat",
            "docId": "SlidingWindow/longest_substring_without_repeat"
          },
          {
            "type": "link",
            "label": "min_window_substring",
            "href": "/docs/SlidingWindow/min_window_substring",
            "docId": "SlidingWindow/min_window_substring"
          }
        ]
      },
      {
        "type": "category",
        "label": "Sorting",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "MergeSort",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Introduction of Merge Sort",
                "href": "/docs/Sorting/MergeSort/introduction",
                "docId": "Sorting/MergeSort/introduction"
              },
              {
                "type": "link",
                "label": "reverse_pairs",
                "href": "/docs/Sorting/MergeSort/reverse_pairs",
                "docId": "Sorting/MergeSort/reverse_pairs"
              }
            ]
          }
        ]
      },
      {
        "type": "category",
        "label": "Strings",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Minimum Remove to Make Valid Parentheses",
            "href": "/docs/Strings/minimum-remove-to-make-valid-parentheses",
            "docId": "Strings/minimum-remove-to-make-valid-parentheses"
          },
          {
            "type": "link",
            "label": "Number of Palindromic Substrings",
            "href": "/docs/Strings/number_of_palindromic_substrings",
            "docId": "Strings/number_of_palindromic_substrings"
          },
          {
            "type": "link",
            "label": "Reorganize String",
            "href": "/docs/Strings/reorganize_strings",
            "docId": "Strings/reorganize_strings"
          },
          {
            "type": "category",
            "label": "Recursive",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "palindrome_partitioning",
                "href": "/docs/Strings/Recursive/palindrome_partitioning",
                "docId": "Strings/Recursive/palindrome_partitioning"
              },
              {
                "type": "link",
                "label": "restore_ip",
                "href": "/docs/Strings/Recursive/restore_ip",
                "docId": "Strings/Recursive/restore_ip"
              }
            ]
          },
          {
            "type": "link",
            "label": "all_anagrams",
            "href": "/docs/Strings/all_anagrams",
            "docId": "Strings/all_anagrams"
          },
          {
            "type": "link",
            "label": "count_say",
            "href": "/docs/Strings/count_say",
            "docId": "Strings/count_say"
          },
          {
            "type": "link",
            "label": "group_anagrams",
            "href": "/docs/Strings/group_anagrams",
            "docId": "Strings/group_anagrams"
          },
          {
            "type": "link",
            "label": "substring_search",
            "href": "/docs/Strings/substring_search",
            "docId": "Strings/substring_search"
          }
        ]
      },
      {
        "type": "category",
        "label": "Tree",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "category",
            "label": "BinarySearchTree",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "link",
                "label": "Create a Balanced Binary Search Tree with sorted Array",
                "href": "/docs/Tree/BinarySearchTree/create_bst_with_sorted_array",
                "docId": "Tree/BinarySearchTree/create_bst_with_sorted_array"
              },
              {
                "type": "link",
                "label": "Balance a Binary Search Tree",
                "href": "/docs/Tree/BinarySearchTree/balance_binary_search_tree",
                "docId": "Tree/BinarySearchTree/balance_binary_search_tree"
              },
              {
                "type": "link",
                "label": "Kth Smallest Element in a BST",
                "href": "/docs/Tree/BinarySearchTree/kth_smallest_elemnt_bst",
                "docId": "Tree/BinarySearchTree/kth_smallest_elemnt_bst"
              },
              {
                "type": "link",
                "label": "Recover Binary Search Tree",
                "href": "/docs/Tree/BinarySearchTree/recover_bst",
                "docId": "Tree/BinarySearchTree/recover_bst"
              },
              {
                "type": "link",
                "label": "Binary Search Tree Iterator",
                "href": "/docs/Tree/BinarySearchTree/bst_iterator",
                "docId": "Tree/BinarySearchTree/bst_iterator"
              },
              {
                "type": "link",
                "label": "delete_node_bst",
                "href": "/docs/Tree/BinarySearchTree/delete_node_bst",
                "docId": "Tree/BinarySearchTree/delete_node_bst"
              },
              {
                "type": "link",
                "label": "is_valid_bst",
                "href": "/docs/Tree/BinarySearchTree/is_valid_bst",
                "docId": "Tree/BinarySearchTree/is_valid_bst"
              },
              {
                "type": "link",
                "label": "range_sum_bst",
                "href": "/docs/Tree/BinarySearchTree/range_sum_bst",
                "docId": "Tree/BinarySearchTree/range_sum_bst"
              },
              {
                "type": "link",
                "label": "unique_bst_2",
                "href": "/docs/Tree/BinarySearchTree/unique_bst_2",
                "docId": "Tree/BinarySearchTree/unique_bst_2"
              }
            ]
          },
          {
            "type": "category",
            "label": "BinaryTree",
            "collapsible": true,
            "collapsed": true,
            "items": [
              {
                "type": "category",
                "label": "AncestorPath",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Nodes at K Distance",
                    "href": "/docs/Tree/BinaryTree/AncestorPath/nodes_at_k_dis",
                    "docId": "Tree/BinaryTree/AncestorPath/nodes_at_k_dis"
                  },
                  {
                    "type": "link",
                    "label": "Burn Tree",
                    "href": "/docs/Tree/BinaryTree/AncestorPath/burn_tree",
                    "docId": "Tree/BinaryTree/AncestorPath/burn_tree"
                  }
                ]
              },
              {
                "type": "category",
                "label": "BTView",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Vertical Order Traversal of a Binary Tree",
                    "href": "/docs/Tree/BinaryTree/BTView/vertical_view_bt",
                    "docId": "Tree/BinaryTree/BTView/vertical_view_bt"
                  }
                ]
              },
              {
                "type": "category",
                "label": "BasicTreeQues",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Height of Binary Tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/height_of_binary_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/height_of_binary_tree"
                  },
                  {
                    "type": "link",
                    "label": "Balanced Binary Tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/balanced_binary_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/balanced_binary_tree"
                  },
                  {
                    "type": "link",
                    "label": "Binary Tree Paths",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/binary_tree_paths",
                    "docId": "Tree/BinaryTree/BasicTreeQues/binary_tree_paths"
                  },
                  {
                    "type": "link",
                    "label": "Count Good Nodes in Binary Tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/count_good_node_inbt",
                    "docId": "Tree/BinaryTree/BasicTreeQues/count_good_node_inbt"
                  },
                  {
                    "type": "link",
                    "label": "Flatten Binary Tree to Linked List",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/flatten_bt_to_linkedlist",
                    "docId": "Tree/BinaryTree/BasicTreeQues/flatten_bt_to_linkedlist"
                  },
                  {
                    "type": "link",
                    "label": "invert_binary_tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/invert_binary_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/invert_binary_tree"
                  },
                  {
                    "type": "link",
                    "label": "merge_2_binary_trees",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/merge_2_binary_trees",
                    "docId": "Tree/BinaryTree/BasicTreeQues/merge_2_binary_trees"
                  },
                  {
                    "type": "link",
                    "label": "same_tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/same_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/same_tree"
                  },
                  {
                    "type": "link",
                    "label": "subtree_of_another_tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/subtree_of_another_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/subtree_of_another_tree"
                  },
                  {
                    "type": "link",
                    "label": "sum_left_leaf",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/sum_left_leaf",
                    "docId": "Tree/BinaryTree/BasicTreeQues/sum_left_leaf"
                  },
                  {
                    "type": "link",
                    "label": "symmetric_tree",
                    "href": "/docs/Tree/BinaryTree/BasicTreeQues/symmetric_tree",
                    "docId": "Tree/BinaryTree/BasicTreeQues/symmetric_tree"
                  }
                ]
              },
              {
                "type": "category",
                "label": "CommonAncestor",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Lowest Common Ancestor of a Binary Tree",
                    "href": "/docs/Tree/BinaryTree/CommonAncestor/lca",
                    "docId": "Tree/BinaryTree/CommonAncestor/lca"
                  },
                  {
                    "type": "link",
                    "label": "Min distance between two given nodes of a Binary Tree",
                    "href": "/docs/Tree/BinaryTree/CommonAncestor/min_distance_bw_2_nodes",
                    "docId": "Tree/BinaryTree/CommonAncestor/min_distance_bw_2_nodes"
                  },
                  {
                    "type": "link",
                    "label": "lca_bst",
                    "href": "/docs/Tree/BinaryTree/CommonAncestor/lca_bst",
                    "docId": "Tree/BinaryTree/CommonAncestor/lca_bst"
                  },
                  {
                    "type": "link",
                    "label": "step-by-step-directions-from-a-binary-tree-node-to-another",
                    "href": "/docs/Tree/BinaryTree/CommonAncestor/step-by-step-directions-from-a-binary-tree-node-to-another",
                    "docId": "Tree/BinaryTree/CommonAncestor/step-by-step-directions-from-a-binary-tree-node-to-another"
                  }
                ]
              },
              {
                "type": "category",
                "label": "CompleteTree",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "count_complete_tree_nodes",
                    "href": "/docs/Tree/BinaryTree/CompleteTree/count_complete_tree_nodes",
                    "docId": "Tree/BinaryTree/CompleteTree/count_complete_tree_nodes"
                  }
                ]
              },
              {
                "type": "category",
                "label": "ConstructBinaryTreeFromTraversal",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Construct Binary Tree from Preorder and Inorder Traversal",
                    "href": "/docs/Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_inorder_preorder",
                    "docId": "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_inorder_preorder"
                  },
                  {
                    "type": "link",
                    "label": "Construct Binary Tree from Preorder and Postorder Traversal",
                    "href": "/docs/Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_preorder_postorder",
                    "docId": "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_preorder_postorder"
                  }
                ]
              },
              {
                "type": "category",
                "label": "PathSum",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "link",
                    "label": "Path Sum",
                    "href": "/docs/Tree/BinaryTree/PathSum/path_sum",
                    "docId": "Tree/BinaryTree/PathSum/path_sum"
                  },
                  {
                    "type": "link",
                    "label": "Sum of Distances in Tree",
                    "href": "/docs/Tree/BinaryTree/PathSum/sum_of_distances_intree",
                    "docId": "Tree/BinaryTree/PathSum/sum_of_distances_intree"
                  },
                  {
                    "type": "link",
                    "label": "Path Sum 3",
                    "href": "/docs/Tree/BinaryTree/PathSum/path_sum_3",
                    "docId": "Tree/BinaryTree/PathSum/path_sum_3"
                  },
                  {
                    "type": "link",
                    "label": "Binary Tree Maximum Path Sum",
                    "href": "/docs/Tree/BinaryTree/PathSum/max_path_sum",
                    "docId": "Tree/BinaryTree/PathSum/max_path_sum"
                  },
                  {
                    "type": "link",
                    "label": "Path Sum II",
                    "href": "/docs/Tree/BinaryTree/PathSum/path_sum_2",
                    "docId": "Tree/BinaryTree/PathSum/path_sum_2"
                  }
                ]
              },
              {
                "type": "category",
                "label": "Traversals",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "category",
                    "label": "LevelOrderTraversal",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "link",
                        "label": "Level Order Traversal",
                        "href": "/docs/Tree/BinaryTree/Traversals/LevelOrderTraversal/level_order_traversal",
                        "docId": "Tree/BinaryTree/Traversals/LevelOrderTraversal/level_order_traversal"
                      },
                      {
                        "type": "link",
                        "label": "Maximum Width of Binary Tree",
                        "href": "/docs/Tree/BinaryTree/Traversals/LevelOrderTraversal/maximum_width_bt",
                        "docId": "Tree/BinaryTree/Traversals/LevelOrderTraversal/maximum_width_bt"
                      },
                      {
                        "type": "link",
                        "label": "Populating Next Right Pointers in Each Node",
                        "href": "/docs/Tree/BinaryTree/Traversals/LevelOrderTraversal/populate_next_right_pointer",
                        "docId": "Tree/BinaryTree/Traversals/LevelOrderTraversal/populate_next_right_pointer"
                      },
                      {
                        "type": "link",
                        "label": "serialize_deserialize_bt",
                        "href": "/docs/Tree/BinaryTree/Traversals/LevelOrderTraversal/serialize_deserialize_bt",
                        "docId": "Tree/BinaryTree/Traversals/LevelOrderTraversal/serialize_deserialize_bt"
                      }
                    ]
                  },
                  {
                    "type": "link",
                    "label": "inorder",
                    "href": "/docs/Tree/BinaryTree/Traversals/inorder",
                    "docId": "Tree/BinaryTree/Traversals/inorder"
                  },
                  {
                    "type": "link",
                    "label": "postorder",
                    "href": "/docs/Tree/BinaryTree/Traversals/postorder",
                    "docId": "Tree/BinaryTree/Traversals/postorder"
                  },
                  {
                    "type": "link",
                    "label": "preorder",
                    "href": "/docs/Tree/BinaryTree/Traversals/preorder",
                    "docId": "Tree/BinaryTree/Traversals/preorder"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "category",
        "label": "Trie",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Introduction to Trie",
            "href": "/docs/Trie/introduction",
            "docId": "Trie/introduction"
          },
          {
            "type": "link",
            "label": "Replace Words",
            "href": "/docs/Trie/replace_words",
            "docId": "Trie/replace_words"
          }
        ]
      }
    ]
  },
  "docs": {
    "Arrays/BasicQues/majority_element": {
      "id": "Arrays/BasicQues/majority_element",
      "title": "majority_element",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/CycleTechniques/duplicate_in_array": {
      "id": "Arrays/CycleTechniques/duplicate_in_array",
      "title": "Duplicate in Array",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/CycleTechniques/find_all_duplicates": {
      "id": "Arrays/CycleTechniques/find_all_duplicates",
      "title": "find_all_duplicates",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/CycleTechniques/first_missing_pos": {
      "id": "Arrays/CycleTechniques/first_missing_pos",
      "title": "First Missing Positive",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Interval/merge_intervals": {
      "id": "Arrays/Interval/merge_intervals",
      "title": "Merge Intervals",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/KadaneAlgo/max_product_subarray": {
      "id": "Arrays/KadaneAlgo/max_product_subarray",
      "title": "max_product_subarray",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/KadaneAlgo/max_subarray": {
      "id": "Arrays/KadaneAlgo/max_subarray",
      "title": "Maximum Subarray",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Matrix/set_matrix_0": {
      "id": "Arrays/Matrix/set_matrix_0",
      "title": "Set Matrix Zero",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Matrix/spiral_matrix": {
      "id": "Arrays/Matrix/spiral_matrix",
      "title": "spiral_matrix",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/N-Sum/sum": {
      "id": "Arrays/N-Sum/sum",
      "title": "sum",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/N-Sum/sum-closest": {
      "id": "Arrays/N-Sum/sum-closest",
      "title": "sum-closest",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Prefix-Sum/continuous-subarray-sum": {
      "id": "Arrays/Prefix-Sum/continuous-subarray-sum",
      "title": "continuous-subarray-sum",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Prefix-Sum/pivot_index": {
      "id": "Arrays/Prefix-Sum/pivot_index",
      "title": "pivot_index",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Prefix-Sum/running_sum": {
      "id": "Arrays/Prefix-Sum/running_sum",
      "title": "Running Sum Array",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Prefix-Sum/subarray_sum_divisible_k": {
      "id": "Arrays/Prefix-Sum/subarray_sum_divisible_k",
      "title": "subarray_sum_divisible_k",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/Prefix-Sum/subarray_sum_equals_k": {
      "id": "Arrays/Prefix-Sum/subarray_sum_equals_k",
      "title": "subarray_sum_equals_k",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/container_with_most_water": {
      "id": "Arrays/TwoPointers/container_with_most_water",
      "title": "container_with_most_water",
      "description": "Optimal Approach using Two Pointer Technique",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/merge_sorted_arrays": {
      "id": "Arrays/TwoPointers/merge_sorted_arrays",
      "title": "merge_sorted_arrays",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/move_zeroes": {
      "id": "Arrays/TwoPointers/move_zeroes",
      "title": "move_zeroes",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/next_permutation": {
      "id": "Arrays/TwoPointers/next_permutation",
      "title": "Next Permutation of a given array",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/remove-duplicates-from-sorted-array": {
      "id": "Arrays/TwoPointers/remove-duplicates-from-sorted-array",
      "title": "remove-duplicates-from-sorted-array",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/sort_colors": {
      "id": "Arrays/TwoPointers/sort_colors",
      "title": "sort_colors",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/squares_sorted_arr": {
      "id": "Arrays/TwoPointers/squares_sorted_arr",
      "title": "squares_sorted_arr",
      "description": "2 pointer method",
      "sidebar": "tutorialSidebar"
    },
    "Arrays/TwoPointers/trapping_rain_water": {
      "id": "Arrays/TwoPointers/trapping_rain_water",
      "title": "Trapping Rain Water",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "BitManipulation/power_of_2": {
      "id": "BitManipulation/power_of_2",
      "title": "power_of_2",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Design/lfu_cache": {
      "id": "Design/lfu_cache",
      "title": "lfu_cache",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Design/lru_cache": {
      "id": "Design/lru_cache",
      "title": "lru_cache",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Design/min_stack": {
      "id": "Design/min_stack",
      "title": "min_stack",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Design/time-based-key-value-store": {
      "id": "Design/time-based-key-value-store",
      "title": "time-based-key-value-store",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/1D-DP/coin_change": {
      "id": "DynamicProgramming/1D-DP/coin_change",
      "title": "coin_change",
      "description": "Recursive Code",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/1D-DP/decode_ways": {
      "id": "DynamicProgramming/1D-DP/decode_ways",
      "title": "decode_ways",
      "description": "recursive method",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/1D-DP/jump_game": {
      "id": "DynamicProgramming/1D-DP/jump_game",
      "title": "Jump Game",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/1D-DP/longest_increasing_subsequence": {
      "id": "DynamicProgramming/1D-DP/longest_increasing_subsequence",
      "title": "Longest Increasing Subsequence",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/1D-DP/unique_binary_search_trees": {
      "id": "DynamicProgramming/1D-DP/unique_binary_search_trees",
      "title": "Unique Binary Search Trees / Catalan Numbers",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/2D-DP/maxlen_repeated_subarray": {
      "id": "DynamicProgramming/2D-DP/maxlen_repeated_subarray",
      "title": "Maximum Length of Repeated Subarray",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/2D-DP/minimum-difficulty-of-a-job-schedule": {
      "id": "DynamicProgramming/2D-DP/minimum-difficulty-of-a-job-schedule",
      "title": "minimum-difficulty-of-a-job-schedule",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/BuySellStocks/buy_sell_stocks_1": {
      "id": "DynamicProgramming/BuySellStocks/buy_sell_stocks_1",
      "title": "Best Time to Buy and Sell Stock",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/BuySellStocks/buy_sell_stocks_2": {
      "id": "DynamicProgramming/BuySellStocks/buy_sell_stocks_2",
      "title": "Best Time to Buy and Sell Stock II",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/BuySellStocks/buy_sell_stocks_3": {
      "id": "DynamicProgramming/BuySellStocks/buy_sell_stocks_3",
      "title": "Best Time to Buy and Sell Stock III",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/BuySellStocks/buy_sell_stocks_4": {
      "id": "DynamicProgramming/BuySellStocks/buy_sell_stocks_4",
      "title": "buy_sell_stocks_4",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DP-Rectangle/count-square-submatrices-with-all-ones": {
      "id": "DynamicProgramming/DP-Rectangle/count-square-submatrices-with-all-ones",
      "title": "Count Square Submatrices with All Ones",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DP-Rectangle/maximal_rectangle": {
      "id": "DynamicProgramming/DP-Rectangle/maximal_rectangle",
      "title": "maximal_rectangle",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DP-Rectangle/maximal_square": {
      "id": "DynamicProgramming/DP-Rectangle/maximal_square",
      "title": "Maximal Squares",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DPStrings/longest_common_subsequence": {
      "id": "DynamicProgramming/DPStrings/longest_common_subsequence",
      "title": "longest_common_subsequence",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DPStrings/longest_common_substring": {
      "id": "DynamicProgramming/DPStrings/longest_common_substring",
      "title": "longest_common_substring",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/DPStrings/longest_valid_paranthesis": {
      "id": "DynamicProgramming/DPStrings/longest_valid_paranthesis",
      "title": "longest_valid_paranthesis",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/frog_jump": {
      "id": "DynamicProgramming/frog_jump",
      "title": "Frog Jump",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "DynamicProgramming/PreComputation/product_except_self": {
      "id": "DynamicProgramming/PreComputation/product_except_self",
      "title": "product_except_self",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/clone_graph": {
      "id": "Graph/clone_graph",
      "title": "clone_graph",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/CycleDetection/directed_graph": {
      "id": "Graph/CycleDetection/directed_graph",
      "title": "Detect cycle in a directed graph",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Graph/CycleDetection/undirected_graph": {
      "id": "Graph/CycleDetection/undirected_graph",
      "title": "Detect cycle in a undirected graph",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Graph/DisjointSetUnion/introduction": {
      "id": "Graph/DisjointSetUnion/introduction",
      "title": "Introduction to Disjoin Set Union",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/DisjointSetUnion/number_of_operation": {
      "id": "Graph/DisjointSetUnion/number_of_operation",
      "title": "Number of Operations to Make Network Connected",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Graph/DisjointSetUnion/redundant_connection": {
      "id": "Graph/DisjointSetUnion/redundant_connection",
      "title": "Redundant Connection",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Graph/FloodFill/introduction": {
      "id": "Graph/FloodFill/introduction",
      "title": "Introduction to Flood Fill Algorithm",
      "description": "Where we use flood fill algorithm ?",
      "sidebar": "tutorialSidebar"
    },
    "Graph/FloodFill/pacific_atlantic_water_flow": {
      "id": "Graph/FloodFill/pacific_atlantic_water_flow",
      "title": "Pacific Atlantic Water Flow",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/FloodFill/replace_o_x_surrounded_x": {
      "id": "Graph/FloodFill/replace_o_x_surrounded_x",
      "title": "Given a matrix of ‘O’ and ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’",
      "description": "Statement",
      "sidebar": "tutorialSidebar"
    },
    "Graph/is_graph_bipartite": {
      "id": "Graph/is_graph_bipartite",
      "title": "is_graph_bipartite",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/ShortestPath/Dijkstra/cheapest-flights-within-k-stops": {
      "id": "Graph/ShortestPath/Dijkstra/cheapest-flights-within-k-stops",
      "title": "cheapest-flights-within-k-stops",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/ShortestPath/Dijkstra/introduction": {
      "id": "Graph/ShortestPath/Dijkstra/introduction",
      "title": "Introduction of Dijkstra's algorithm",
      "description": "Why Dijkstra's algorithm Exist ?",
      "sidebar": "tutorialSidebar"
    },
    "Graph/ShortestPath/Dijkstra/network_delay_time": {
      "id": "Graph/ShortestPath/Dijkstra/network_delay_time",
      "title": "Network Delay Time",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Graph/TarjanAlgo/introduction": {
      "id": "Graph/TarjanAlgo/introduction",
      "title": "introduction",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Graph/TopoSort/introduction": {
      "id": "Graph/TopoSort/introduction",
      "title": "introduction",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/gas_station": {
      "id": "Greedy/gas_station",
      "title": "Gas Station",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/jump_game": {
      "id": "Greedy/jump_game",
      "title": "jump_game",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/max_events_canbe_attended": {
      "id": "Greedy/max_events_canbe_attended",
      "title": "max_events_canbe_attended",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/max_number_1s": {
      "id": "Greedy/max_number_1s",
      "title": "Maximum no of 1's row",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/min_cost_leaf_values": {
      "id": "Greedy/min_cost_leaf_values",
      "title": "min_cost_leaf_values",
      "description": "Brute Force Approach",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/min_time_to_make_rope_colorful": {
      "id": "Greedy/min_time_to_make_rope_colorful",
      "title": "min_time_to_make_rope_colorful",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/minimum-deletions-to-make-character-frequencies-unique": {
      "id": "Greedy/minimum-deletions-to-make-character-frequencies-unique",
      "title": "minimum-deletions-to-make-character-frequencies-unique",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Greedy/non_overlapping_intervals": {
      "id": "Greedy/non_overlapping_intervals",
      "title": "non_overlapping_intervals",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "HashMaps/first_unique_character_in_string": {
      "id": "HashMaps/first_unique_character_in_string",
      "title": "First Unique Character in a String",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "HashMaps/introduction": {
      "id": "HashMaps/introduction",
      "title": "introduction",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "HashMaps/top_k_freq": {
      "id": "HashMaps/top_k_freq",
      "title": "top_k_freq",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Heap/Heap/median_stream": {
      "id": "Heap/Heap/median_stream",
      "title": "median_stream",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Heap/introduction": {
      "id": "Heap/introduction",
      "title": "Introduction to Heap Data Structure",
      "description": "what is heap data structure ?",
      "sidebar": "tutorialSidebar"
    },
    "Heap/PriorityQueue/k-closest-points": {
      "id": "Heap/PriorityQueue/k-closest-points",
      "title": "Find K Closest Elements",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "intro": {
      "id": "intro",
      "title": "Introduction",
      "description": "What is the aim of Sde Babu Content ?",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Basic/merge_2_sorted_list": {
      "id": "LinkedList/Basic/merge_2_sorted_list",
      "title": "merge_2_sorted_list",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Basic/reorder_list": {
      "id": "LinkedList/Basic/reorder_list",
      "title": "reorder_list",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Basic/reverse_linked_list": {
      "id": "LinkedList/Basic/reverse_linked_list",
      "title": "Reverse Linked List 2",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Basic/swap_nodes_in_pair": {
      "id": "LinkedList/Basic/swap_nodes_in_pair",
      "title": "swap_nodes_in_pair",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/copy_list_random_pointer": {
      "id": "LinkedList/copy_list_random_pointer",
      "title": "Copy List with Random Pointer",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/intersection_linked_list": {
      "id": "LinkedList/intersection_linked_list",
      "title": "intersection_linked_list",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/ListCycle/first_node_in_cycle": {
      "id": "LinkedList/ListCycle/first_node_in_cycle",
      "title": "first_node_in_cycle",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Maths/add_number_2": {
      "id": "LinkedList/Maths/add_number_2",
      "title": "add_number_2",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/Maths/add_two_numers": {
      "id": "LinkedList/Maths/add_two_numers",
      "title": "Add Two Numbers",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/odd_even": {
      "id": "LinkedList/odd_even",
      "title": "Odd Even Linked List By Index",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/partition_list": {
      "id": "LinkedList/partition_list",
      "title": "Partition List",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/remove_duplicate_1": {
      "id": "LinkedList/remove_duplicate_1",
      "title": "remove_duplicate_1",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/remove_duplicate_2": {
      "id": "LinkedList/remove_duplicate_2",
      "title": "Remove Duplicates from Sorted List II",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/remove_nth_node_from_end": {
      "id": "LinkedList/remove_nth_node_from_end",
      "title": "Remove Nth Node From End of List",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/rotate_list": {
      "id": "LinkedList/rotate_list",
      "title": "Rotate the Linked List",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "LinkedList/segregate_even_odd": {
      "id": "LinkedList/segregate_even_odd",
      "title": "Segregate even and odd nodes in a Link List",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Maths/atoi": {
      "id": "Maths/atoi",
      "title": "atoi",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Maths/min_moves_for_equal_array": {
      "id": "Maths/min_moves_for_equal_array",
      "title": "min_moves_for_equal_array",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Maths/missing_num": {
      "id": "Maths/missing_num",
      "title": "Missing Number",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Maths/multiply_string": {
      "id": "Maths/multiply_string",
      "title": "multiply_string",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Maths/permutation_sequence": {
      "id": "Maths/permutation_sequence",
      "title": "Permutation Sequence",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Maths/plus_one": {
      "id": "Maths/plus_one",
      "title": "plus_one",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Maths/pow_x_n": {
      "id": "Maths/pow_x_n",
      "title": "pow_x_n",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Queue/BFS/introduction": {
      "id": "Queue/BFS/introduction",
      "title": "Introduction for BFS(Breath First Search)",
      "description": "What is BFS ?",
      "sidebar": "tutorialSidebar"
    },
    "Queue/BFS/number_of_island": {
      "id": "Queue/BFS/number_of_island",
      "title": "Number of Islands",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Queue/sliding_window_maximum": {
      "id": "Queue/sliding_window_maximum",
      "title": "Sliding Window Maximum",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/Backtracking/combination_sum_1": {
      "id": "Recursion/Backtracking/combination_sum_1",
      "title": "combination_sum_1",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/Backtracking/generate_paranthesis": {
      "id": "Recursion/Backtracking/generate_paranthesis",
      "title": "generate_paranthesis",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/Backtracking/partition_k_eqal_sum_subset": {
      "id": "Recursion/Backtracking/partition_k_eqal_sum_subset",
      "title": "partition_k_eqal_sum_subset",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/Backtracking/subset_1": {
      "id": "Recursion/Backtracking/subset_1",
      "title": "subset_1",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/introduction": {
      "id": "Recursion/DFS/introduction",
      "title": "introduction",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/longest_increasing_path_matrix": {
      "id": "Recursion/DFS/longest_increasing_path_matrix",
      "title": "Longest Increasing Path in a Matrix",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/making_large_island": {
      "id": "Recursion/DFS/making_large_island",
      "title": "Making a Large Island",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/number_of_closed_island": {
      "id": "Recursion/DFS/number_of_closed_island",
      "title": "Number of Closed Island",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/number_of_island": {
      "id": "Recursion/DFS/number_of_island",
      "title": "number_of_island",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/shortest_bridge": {
      "id": "Recursion/DFS/shortest_bridge",
      "title": "Shortest Bridge",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/word_search": {
      "id": "Recursion/DFS/word_search",
      "title": "word_search",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Recursion/DFS/word_search_2": {
      "id": "Recursion/DFS/word_search_2",
      "title": "word_search_2",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/capacity_to_ship_package_within_ddays": {
      "id": "Searching/BinarySearch/capacity_to_ship_package_within_ddays",
      "title": "Capacity To Ship Packages Within D Days",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/find_peak": {
      "id": "Searching/BinarySearch/find_peak",
      "title": "find_peak",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/first_last_pos": {
      "id": "Searching/BinarySearch/first_last_pos",
      "title": "first_last_pos",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/introduction": {
      "id": "Searching/BinarySearch/introduction",
      "title": "Introduction of Binary Search",
      "description": "Definition",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/median_2_sorted_arrays": {
      "id": "Searching/BinarySearch/median_2_sorted_arrays",
      "title": "Median of Two Sorted Arrays",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/min_in_roated_sorted_array": {
      "id": "Searching/BinarySearch/min_in_roated_sorted_array",
      "title": "min_in_roated_sorted_array",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/min_roated_sorted_array_with_duplicates": {
      "id": "Searching/BinarySearch/min_roated_sorted_array_with_duplicates",
      "title": "min_roated_sorted_array_with_duplicates",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/minimum_limit_of_balls_in_bag": {
      "id": "Searching/BinarySearch/minimum_limit_of_balls_in_bag",
      "title": "Minimum Limit of Balls In Bag",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Searching/BinarySearch/search_in_rotated": {
      "id": "Searching/BinarySearch/search_in_rotated",
      "title": "Search in Rotated Sorted Array",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "SegmentTrees/intro": {
      "id": "SegmentTrees/intro",
      "title": "Segment Trees",
      "description": "Definition",
      "sidebar": "tutorialSidebar"
    },
    "SlidingWindow/longest_substring_without_repeat": {
      "id": "SlidingWindow/longest_substring_without_repeat",
      "title": "longest_substring_without_repeat",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "SlidingWindow/longest-repeating-character-replacement": {
      "id": "SlidingWindow/longest-repeating-character-replacement",
      "title": "longest-repeating-character-replacement",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "SlidingWindow/longest-substring-with-at-least-k-repeating-characters": {
      "id": "SlidingWindow/longest-substring-with-at-least-k-repeating-characters",
      "title": "longest-substring-with-at-least-k-repeating-characters",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "SlidingWindow/min_window_substring": {
      "id": "SlidingWindow/min_window_substring",
      "title": "min_window_substring",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Sorting/MergeSort/introduction": {
      "id": "Sorting/MergeSort/introduction",
      "title": "Introduction of Merge Sort",
      "description": "Definition",
      "sidebar": "tutorialSidebar"
    },
    "Sorting/MergeSort/reverse_pairs": {
      "id": "Sorting/MergeSort/reverse_pairs",
      "title": "reverse_pairs",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/introduction": {
      "id": "Stack/MonotonicStack/introduction",
      "title": "introduction",
      "description": "whenever we need the max/min element and side by side have to maintain the order then monotonic stack is the best way to achive the goal.",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/largest_rectange_histogram": {
      "id": "Stack/MonotonicStack/largest_rectange_histogram",
      "title": "largest_rectange_histogram",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/maximum_binary_tree": {
      "id": "Stack/MonotonicStack/maximum_binary_tree",
      "title": "maximum_binary_tree",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/most_competitive_subsequence": {
      "id": "Stack/MonotonicStack/most_competitive_subsequence",
      "title": "most_competitive_subsequence",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/next_greater_element": {
      "id": "Stack/MonotonicStack/next_greater_element",
      "title": "Next Greater Element",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Stack/MonotonicStack/remove_k_digits": {
      "id": "Stack/MonotonicStack/remove_k_digits",
      "title": "remove_k_digits",
      "description": "hence we need to make sure that that output should be nearly sorted in strictly increasing manner then only its possibly mini",
      "sidebar": "tutorialSidebar"
    },
    "Stack/reverse_polish_notation": {
      "id": "Stack/reverse_polish_notation",
      "title": "reverse_polish_notation",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Stack/sum-of-subarray-minimums": {
      "id": "Stack/sum-of-subarray-minimums",
      "title": "Sum of Subarray Minimums",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Strings/all_anagrams": {
      "id": "Strings/all_anagrams",
      "title": "all_anagrams",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Strings/count_say": {
      "id": "Strings/count_say",
      "title": "count_say",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Strings/group_anagrams": {
      "id": "Strings/group_anagrams",
      "title": "group_anagrams",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Strings/minimum-remove-to-make-valid-parentheses": {
      "id": "Strings/minimum-remove-to-make-valid-parentheses",
      "title": "Minimum Remove to Make Valid Parentheses",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Strings/number_of_palindromic_substrings": {
      "id": "Strings/number_of_palindromic_substrings",
      "title": "Number of Palindromic Substrings",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Strings/Recursive/palindrome_partitioning": {
      "id": "Strings/Recursive/palindrome_partitioning",
      "title": "palindrome_partitioning",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Strings/Recursive/restore_ip": {
      "id": "Strings/Recursive/restore_ip",
      "title": "restore_ip",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Strings/reorganize_strings": {
      "id": "Strings/reorganize_strings",
      "title": "Reorganize String",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Strings/substring_search": {
      "id": "Strings/substring_search",
      "title": "substring_search",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/balance_binary_search_tree": {
      "id": "Tree/BinarySearchTree/balance_binary_search_tree",
      "title": "Balance a Binary Search Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/bst_iterator": {
      "id": "Tree/BinarySearchTree/bst_iterator",
      "title": "Binary Search Tree Iterator",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/create_bst_with_sorted_array": {
      "id": "Tree/BinarySearchTree/create_bst_with_sorted_array",
      "title": "Create a Balanced Binary Search Tree with sorted Array",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/delete_node_bst": {
      "id": "Tree/BinarySearchTree/delete_node_bst",
      "title": "delete_node_bst",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/is_valid_bst": {
      "id": "Tree/BinarySearchTree/is_valid_bst",
      "title": "is_valid_bst",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/kth_smallest_elemnt_bst": {
      "id": "Tree/BinarySearchTree/kth_smallest_elemnt_bst",
      "title": "Kth Smallest Element in a BST",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/range_sum_bst": {
      "id": "Tree/BinarySearchTree/range_sum_bst",
      "title": "range_sum_bst",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/recover_bst": {
      "id": "Tree/BinarySearchTree/recover_bst",
      "title": "Recover Binary Search Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinarySearchTree/unique_bst_2": {
      "id": "Tree/BinarySearchTree/unique_bst_2",
      "title": "unique_bst_2",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/AncestorPath/burn_tree": {
      "id": "Tree/BinaryTree/AncestorPath/burn_tree",
      "title": "Burn Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/AncestorPath/nodes_at_k_dis": {
      "id": "Tree/BinaryTree/AncestorPath/nodes_at_k_dis",
      "title": "Nodes at K Distance",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/balanced_binary_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/balanced_binary_tree",
      "title": "Balanced Binary Tree",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/binary_tree_paths": {
      "id": "Tree/BinaryTree/BasicTreeQues/binary_tree_paths",
      "title": "Binary Tree Paths",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/count_good_node_inbt": {
      "id": "Tree/BinaryTree/BasicTreeQues/count_good_node_inbt",
      "title": "Count Good Nodes in Binary Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/flatten_bt_to_linkedlist": {
      "id": "Tree/BinaryTree/BasicTreeQues/flatten_bt_to_linkedlist",
      "title": "Flatten Binary Tree to Linked List",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/height_of_binary_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/height_of_binary_tree",
      "title": "Height of Binary Tree",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/invert_binary_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/invert_binary_tree",
      "title": "invert_binary_tree",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/merge_2_binary_trees": {
      "id": "Tree/BinaryTree/BasicTreeQues/merge_2_binary_trees",
      "title": "merge_2_binary_trees",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/same_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/same_tree",
      "title": "same_tree",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/subtree_of_another_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/subtree_of_another_tree",
      "title": "subtree_of_another_tree",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/sum_left_leaf": {
      "id": "Tree/BinaryTree/BasicTreeQues/sum_left_leaf",
      "title": "sum_left_leaf",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BasicTreeQues/symmetric_tree": {
      "id": "Tree/BinaryTree/BasicTreeQues/symmetric_tree",
      "title": "symmetric_tree",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/BTView/vertical_view_bt": {
      "id": "Tree/BinaryTree/BTView/vertical_view_bt",
      "title": "Vertical Order Traversal of a Binary Tree",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/CommonAncestor/lca": {
      "id": "Tree/BinaryTree/CommonAncestor/lca",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/CommonAncestor/lca_bst": {
      "id": "Tree/BinaryTree/CommonAncestor/lca_bst",
      "title": "lca_bst",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/CommonAncestor/min_distance_bw_2_nodes": {
      "id": "Tree/BinaryTree/CommonAncestor/min_distance_bw_2_nodes",
      "title": "Min distance between two given nodes of a Binary Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/CommonAncestor/step-by-step-directions-from-a-binary-tree-node-to-another": {
      "id": "Tree/BinaryTree/CommonAncestor/step-by-step-directions-from-a-binary-tree-node-to-another",
      "title": "step-by-step-directions-from-a-binary-tree-node-to-another",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/CompleteTree/count_complete_tree_nodes": {
      "id": "Tree/BinaryTree/CompleteTree/count_complete_tree_nodes",
      "title": "count_complete_tree_nodes",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_inorder_preorder": {
      "id": "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_inorder_preorder",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_preorder_postorder": {
      "id": "Tree/BinaryTree/ConstructBinaryTreeFromTraversal/construct_from_preorder_postorder",
      "title": "Construct Binary Tree from Preorder and Postorder Traversal",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/PathSum/max_path_sum": {
      "id": "Tree/BinaryTree/PathSum/max_path_sum",
      "title": "Binary Tree Maximum Path Sum",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/PathSum/path_sum": {
      "id": "Tree/BinaryTree/PathSum/path_sum",
      "title": "Path Sum",
      "description": "Level - Easy",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/PathSum/path_sum_2": {
      "id": "Tree/BinaryTree/PathSum/path_sum_2",
      "title": "Path Sum II",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/PathSum/path_sum_3": {
      "id": "Tree/BinaryTree/PathSum/path_sum_3",
      "title": "Path Sum 3",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/PathSum/sum_of_distances_intree": {
      "id": "Tree/BinaryTree/PathSum/sum_of_distances_intree",
      "title": "Sum of Distances in Tree",
      "description": "Level - Hard",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/inorder": {
      "id": "Tree/BinaryTree/Traversals/inorder",
      "title": "inorder",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/LevelOrderTraversal/level_order_traversal": {
      "id": "Tree/BinaryTree/Traversals/LevelOrderTraversal/level_order_traversal",
      "title": "Level Order Traversal",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/LevelOrderTraversal/maximum_width_bt": {
      "id": "Tree/BinaryTree/Traversals/LevelOrderTraversal/maximum_width_bt",
      "title": "Maximum Width of Binary Tree",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/LevelOrderTraversal/populate_next_right_pointer": {
      "id": "Tree/BinaryTree/Traversals/LevelOrderTraversal/populate_next_right_pointer",
      "title": "Populating Next Right Pointers in Each Node",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/LevelOrderTraversal/serialize_deserialize_bt": {
      "id": "Tree/BinaryTree/Traversals/LevelOrderTraversal/serialize_deserialize_bt",
      "title": "serialize_deserialize_bt",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/postorder": {
      "id": "Tree/BinaryTree/Traversals/postorder",
      "title": "postorder",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Tree/BinaryTree/Traversals/preorder": {
      "id": "Tree/BinaryTree/Traversals/preorder",
      "title": "preorder",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "Trie/introduction": {
      "id": "Trie/introduction",
      "title": "Introduction to Trie",
      "description": "What is Trie ?",
      "sidebar": "tutorialSidebar"
    },
    "Trie/replace_words": {
      "id": "Trie/replace_words",
      "title": "Replace Words",
      "description": "Level - Medium",
      "sidebar": "tutorialSidebar"
    }
  }
}